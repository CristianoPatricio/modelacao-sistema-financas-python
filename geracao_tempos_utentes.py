import random
import datetime

# OBJETIVO: Pretende-se construir e implementar um modelo de simulação de um sistema relacionado 
# com o funcionamento do Serviço de Atendimento de uma Repartição de Finanças, para averiguar o 
# desempenho da solução apresentada.

###### SECÇÃO DAS FUNÇÕES ######

# OBJETIVO: gerar o número de clientes (entre 120 e 150)
# RETURN: número de clientes (nCliente)
def getNumeroClientes():    
    return random.randrange(120,150)

# numero de clientes
nClientes = getNumeroClientes()

# tabela com a informação de todos os clientes
tabelaClientes = []

# OBJETIVO: função que gera números entre 0 e 1 para um dado n. de clientes
# PARAMETROS: seed -> Seed value is the previous value number generated by the generator. (Ajustar p/ as %)
#             nCLientes -> número de clientes        
# RETURN: lista com os nClientes números aleatórios entre 0 e 1
def getListNumerosEntre0e1(seed, nClientes):
    listNum01 = []

    # definir o valor de seed
    random.seed(seed)
    for x in range (0,nClientes):
        # gerar um numero aleatorio entre 0 e 1
        num = random.random()
        listNum01.append(num)
        
    return listNum01

# OBJETIVO: função que gera os clientes considerados prioritários
# PARAMETROS: listNumbers -> lista de números aleatórios entre 0 e 1
#             listClientes -> lista de clientes
# RETURN: lista com os clientes considerados prioritários
def getClientesPrioritarios(listNumbers, listClientes):
    listPrioritarios = []
    bkList = list(listClientes)

    for num in listNumbers:
        # 20% dos utentes são considerados prioritários logo na 1ª fase, mantendo este propriedade até partirem (abandonarem) do sistema
        if num >= 0 and num <= 0.2:
            cliente = random.choice(list(bkList))
            listPrioritarios.append(cliente)
            bkList.remove(cliente)
    
    return listPrioritarios

# OBJETIVO: função que gera os tempos de chegada
# PARAMETROS: listNumbers -> lista de números aleatórios entre 0 e 1
# RETURN: lista com os tempos de chegada para os nClientes 
def getTemposChegada(listNumbers):
    # lista c/ tempos das 9h -> 11h
    listInt1 = []
    # lista c/ tempos das 11h -> 13h
    listInt2 = []
    # lista c/ tempos das 13h -> 15h
    listInt3 = []
    # lista c/ tempos das 15h -> 17h
    listInt4 = []

    for num in listNumbers:
        if num >= 0 and num <= 0.1:
            # gerar um numero entre 0 e 7200
            listInt1.append(random.randrange(0,7200))
        elif num >= 0.11 and num <= 0.35:
            # gerar um numero entre 7201 e 14400
            listInt2.append(random.randrange(7201,14400))
        elif num >= 0.36 and num <= 0.80:
            # gerar um numero entre 14401 e 21600
            listInt3.append(random.randrange(14401,21600))
        else:
            # gerar um numero entre 21601 e 28800
            listInt4.append(random.randrange(21601,28800))

    return listInt1 + listInt2 + listInt3 + listInt4 

# OBJETIVO: função que gera os tempos de triagem
# PARAMETROS: listNumbers -> lista de números aleatórios entre 0 e 1
# RETURN: lista com os tempos de triagem para os nClientes 
def getTemposTriagem(listNumbers):
    listTemposTriagem = []
    
    for num in listNumbers:
        if num >= 0 and num <= 0.55:
            listTemposTriagem.append(random.randrange(1,60))
        elif num >= 0.56 and num <= 0.90:
            listTemposTriagem.append(random.randrange(60,120))
        else:
            listTemposTriagem.append(random.randrange(120,180))
    
    return listTemposTriagem 

# OBJETIVO: função que gera os clientes que passam da 1.ª para 3.ª fase
# PARAMETROS: listNumbers -> lista de números aleatórios entre 0 e 1
#             listClientes -> lista de clientes
# RETURN: lista com os tempos de chegada dos clientes que passam da 1.ª para a 2.ª fase 
def getClientes1para3Fase(listNumbers, listClientes):
    listClientes1para3Fase = []
    bkList = list(listClientes)

    for num in listNumbers:
        # 10% dos utentes passam da 1ª fase diretamente para a 3ª fase
        if num >= 0 and num <= 0.1:
            cliente = random.choice(list(bkList))
            listClientes1para3Fase.append(cliente)
            bkList.remove(cliente)

    return listClientes1para3Fase

# OBJETIVO: função que gera os clientes que são atendidos no Posto A
# PARAMETROS: listNumbers -> lista de números aleatórios entre 0 e 1
#             listCli2Fase -> lista de clientes
# RETURN: lista com os clientes que são atendidos no Posto A
def getClientesPostoA(listNumbers, listCli2Fase):
    listaClientesPostoA = []
    bkList = list(listCli2Fase)

    for num in listNumbers:
        # 35% dos utentes que passam pela 2ª fase são atendidos nos postos do tipo A
        if num >= 0 and num <= 0.35:
            cliente = random.choice(list(bkList))
            listaClientesPostoA.append(cliente)
            bkList.remove(cliente)

    return listaClientesPostoA

# OBJETIVO: função que gera os clientes que são atendidos no Posto C
# PARAMETROS: listNumbers -> lista de números aleatórios entre 0 e 1
#             listClientes -> lista de clientes
# RETURN: lista com os clientes que são atendidos no Posto C
def getClientesPostoC(listNumbers, listClientes):
    listaClientesPostoC = []
    bkList = list(listClientes)

    for num in listNumbers:
        # 15% dos utentes que passam pela 2ª fase são atendidos nos postos do tipo C
        if num >= 0 and num <= 0.15:
            cliente = random.choice(list(bkList))
            listaClientesPostoC.append(cliente)
            bkList.remove(cliente)

    return listaClientesPostoC

# OBJETIVO: função que gera os clientes que são atendidos no Posto A e passam pela 3.ª fase
# PARAMETROS: listNumbers -> lista de números aleatórios entre 0 e 1
#             listClientes -> lista de clientes
# RETURN: lista com os clientes que são atendidos no Posto A e passam pela 3.ª fase
def getClientesPostoA3Fase(listNumbers, listClientes):
    listaClientesPostoA3Fase = []
    bkList = list(listClientes)

    for num in listNumbers:
        # 20% dos utentes atendidos nos postos do tipo A passam pela 3ª fase
        if num >= 0 and num <= 0.2:
            cliente = random.choice(list(bkList))
            listaClientesPostoA3Fase.append(cliente)
            bkList.remove(cliente)

    return listaClientesPostoA3Fase

# OBJETIVO: função que gera os clientes que são atendidos no Posto A e passam pela 3.ª fase e regressam à 2.ª fase
# PARAMETROS: listNumbers -> lista de números aleatórios entre 0 e 1
#             listClientes -> lista de clientes
# RETURN: lista com os clientes que são atendidos no Posto A e passam pela 3.ª fase e regressam à 2.ª fase
def getClientesPostoA3FaseRegressam(listNumbers, listClientes):
    listaClientes = []
    bkList = list(listClientes)

    for num in listNumbers:
        # apenas 30% regressam à 2ª fase
        if num >= 0 and num <= 0.3:
            cliente = random.choice(list(bkList))
            listaClientes.append(cliente)
            bkList.remove(cliente)

    return listaClientes

# OBJETIVO: função que gera os clientes que são atendidos no Posto B e passam pela 3.ª fase
# PARAMETROS: listNumbers -> lista de números aleatórios entre 0 e 1
#             listClientes -> lista de clientes
# RETURN: lista com os clientes que são atendidos no Posto B e passam pela 3.ª fase
def getClientesPostoB3Fase(listNumbers, listClientes):
    listaClientes = []
    bkList = list(listClientes)

    for num in listNumbers:
        # 30% dos utentes atendidos nos postos do tipo B passam pela 3ª fase
        if num >= 0 and num <= 0.3:
            cliente = random.choice(list(bkList))
            listaClientes.append(cliente)
            bkList.remove(cliente)

    return listaClientes

# OBJETIVO: função que gera os clientes que são atendidos no Posto B e passam pela 3.ª fase e regressam à 2.ª fase
# PARAMETROS: listNumbers -> lista de números aleatórios entre 0 e 1
#             listClientes -> lista de clientes
# RETURN: lista com os clientes que são atendidos no Posto B e passam pela 3.ª fase e regressam à 2.ª fase
def getClientesPostoB3FaseRegressam(listNumbers, listClientes):
    listaClientes = []
    bkList = list(listClientes)

    for num in listNumbers:
        # 20% regressam à 2ª fase
        if num >= 0 and num <= 0.2:
            cliente = random.choice(list(bkList))
            listaClientes.append(cliente)
            bkList.remove(cliente)

    return listaClientes
    

# OBJETIVO: função que gera os clientes que são atendidos no Posto C e passam pela 3.ª fase
# PARAMETROS: listNumbers -> lista de números aleatórios entre 0 e 1
#             listClientes -> lista de clientes
# RETURN: lista com os clientes que são atendidos no Posto C e passam pela 3.ª fase
def getClientesPostoC3Fase(listNumbers, listClientes):
    listaClientes = []
    bkList = list(listClientes)

    for num in listNumbers:
        # 75% dos utentes atendidos nos postos do tipo C passam pela 3ª fase
        if num >= 0 and num <= 0.75:
            cliente = random.choice(list(bkList))
            listaClientes.append(cliente)
            bkList.remove(cliente)

    return listaClientes
    
# OBJETIVO: função que gera os clientes que são atendidos no Posto C e passam pela 3.ª fase e regressam à 2.ª fase
# PARAMETROS: listNumbers -> lista de números aleatórios entre 0 e 1
#             listClientes -> lista de clientes
# RETURN: lista com os clientes que são atendidos no Posto C e passam pela 3.ª fase e regressam à 2.ª fase
def getClientesPostoC3FaseRegressam(listNumbers, listClientes):
    listaClientes = []
    bkList = list(listClientes)

    for num in listNumbers:
        # 40% regressam à 2ª fase
        if num >= 0 and num <= 0.4:
            cliente = random.choice(list(bkList))
            listaClientes.append(cliente)
            bkList.remove(cliente)

    return listaClientes
    

##### RESULTADOS #####

# lista com os nClientes
listaClientes = []
for i in range(0,nClientes):
    listaClientes.append(i)

# lista com números aleatórios entre 0 e 1
listaNumerosEntre0e1 = getListNumerosEntre0e1(12,nClientes)

# lista com os tempos de chegada
temposChegada = getTemposChegada(listaNumerosEntre0e1)
temposChegada.sort()
#print(temposChegada)

# lista com os clientes prioritários (aleatórios entre 0 e nClientes-1)
listaNumerosEntre0e1 = getListNumerosEntre0e1(13,nClientes)
clientesPrioritarios = getClientesPrioritarios(listaNumerosEntre0e1, listaClientes)
clientesPrioritarios.sort()

# lista com os clientes gerais
clientesGerais = list(set(listaClientes) - set(clientesPrioritarios))
clientesGerais.sort()

# lista com os tempos de triagem
listaNumerosEntre0e1 = getListNumerosEntre0e1(10,nClientes)
temposTriagem = getTemposTriagem(listaNumerosEntre0e1)
temposTriagemBackup = temposTriagem
#print(temposTriagem)

# lista com os clientes que passam da 1.ª para a 3.ª fase
listaNumerosEntre0e1 = getListNumerosEntre0e1(10,nClientes)
clientes1para3fase = getClientes1para3Fase(listaNumerosEntre0e1, listaClientes)
clientes1para3fase.sort()

# lista com os clientes que passam na segunda fase
clientes2fase = list(set(listaClientes) - set(clientes1para3fase))
clientes2fase.sort()

# lista com os clientes que são atendidos no Posto A
listaNumerosEntre0e1 = getListNumerosEntre0e1(13,len(clientes2fase))
clientesPostoA = getClientesPostoA(listaNumerosEntre0e1, clientes2fase)
clientesPostoA.sort()

# lista com os clientes que são atendidos no Posto C
clientes2faseMenosPostoA = list(set(clientes2fase) - set(clientesPostoA))
listaNumerosEntre0e1 = getListNumerosEntre0e1(12,len(clientes2faseMenosPostoA))
clientesPostoC = getClientesPostoC(listaNumerosEntre0e1, clientes2faseMenosPostoA)
clientesPostoC.sort()

# lista com os clientes que são atendidos no Posto B
clientesPostoB = list(set(clientes2fase) - set(clientesPostoC+clientesPostoA))
clientesPostoB.sort()

# lista dos clientes que são atendidos no PostoA, passam para a 3.ª fase
listaNumerosEntre0e1 = getListNumerosEntre0e1(13,len(clientesPostoA))
clientesPostoA3Fase = getClientesPostoA3Fase(listaNumerosEntre0e1, clientesPostoA)

# lista dos clientes que são atendidos no PostoA e que abandonam o sistema
clientesPostoAAbandonamSistema = list(set(clientesPostoA) - set(clientesPostoA3Fase))

# lista dos clientes que são atendidos no PostoA, passam para a 3.ª fase e regressam à 2.ª fase
listaNumerosEntre0e1 = getListNumerosEntre0e1(12,len(clientesPostoA3Fase))
clientesPostoA3FaseRegressam = getClientesPostoA3FaseRegressam(listaNumerosEntre0e1, clientesPostoA3Fase)

# lista dos clientes que são atendidos no PostoA, passam para a 3.ª fase e abandonam o sistema
clientesPostoA3FaseAbandonam = list(set(clientesPostoA3Fase) - set(clientesPostoA3FaseRegressam))

# lista dos clientes que são atendidos no PostoB, passam para a 3.ª fase
listaNumerosEntre0e1 = getListNumerosEntre0e1(11,len(clientesPostoB))
clientesPostoB3Fase = getClientesPostoB3Fase(listaNumerosEntre0e1, clientesPostoB)

# lista dos clientes que são atendidos no PostoB e que abandonam o sistema
clientesPostoBAbandonamSistema = list(set(clientesPostoB) - set(clientesPostoB3Fase))

# lista dos clientes que são atendidos no PostoB, passam para a 3.ª fase e regressam à 2.ª fase
listaNumerosEntre0e1 = getListNumerosEntre0e1(12,len(clientesPostoB3Fase))
clientesPostoB3FaseRegressam = getClientesPostoB3FaseRegressam(listaNumerosEntre0e1, clientesPostoB3Fase)

# lista dos clientes que são atendidos no PostoB, passam para a 3.ª fase e abandonam o sistema
clientesPostoB3FaseAbandonam = list(set(clientesPostoB3Fase) - set(clientesPostoB3FaseRegressam))

# lista dos clientes que são atendidos no PostoC, passam para a 3.ª fase
listaNumerosEntre0e1 = getListNumerosEntre0e1(11,len(clientesPostoC))
clientesPostoC3Fase = getClientesPostoC3Fase(listaNumerosEntre0e1, clientesPostoC)

# lista dos clientes que são atendidos no PostoC e que abandonam o sistema
clientesPostoCAbandonamSistema = list(set(clientesPostoC) - set(clientesPostoC3Fase))

# lista dos clientes que são atendidos no PostoC, passam para a 3.ª fase e regressam à 2.ª fase
listaNumerosEntre0e1 = getListNumerosEntre0e1(12,len(clientesPostoC3Fase))
clientesPostoC3FaseRegressam = getClientesPostoC3FaseRegressam(listaNumerosEntre0e1, clientesPostoC3Fase)

# lista dos clientes que são atendidos no PostoC, passam para a 3.ª fase e abandonam o sistema
clientesPostoC3FaseAbandonam = list(set(clientesPostoC3Fase) - set(clientesPostoC3FaseRegressam))

def getTempos3fase(listNumbers):
    listTempos3fase = []
    
    for num in listNumbers:
        if num >= 0 and num <= 0.4:
            listTempos3fase.append(random.randrange(1,60))
        elif num >= 0.56 and num <= 0.95:
            listTempos3fase.append(random.randrange(60,120))
        else:
            listTempos3fase.append(random.randrange(120,180))
    
    return listTempos3fase

listaNumerosEntre0e1 = getListNumerosEntre0e1(10,len(clientes1para3fase)+len(clientesPostoA3Fase)+len(clientesPostoB3Fase)+len(clientesPostoC3Fase))
tempos3fase = getTempos3fase(listaNumerosEntre0e1)

def getTempos2fase(listNumbers,tempo1,tempo2,tempo3,tempo4,perc1,perc2,perc3):
    listTempos2fase = []
    
    for num in listNumbers:
        if num >= 0 and num <= perc1:
            listTempos2fase.append(random.randrange(1,tempo1))
        elif num > perc1 and num <= perc2:
            listTempos2fase.append(random.randrange(tempo1,tempo2))
        elif num > perc2 and num <= perc3:
            listTempos2fase.append(random.randrange(tempo2,tempo3))
        else:
            listTempos2fase.append(random.randrange(tempo3,tempo4))
    
    return listTempos2fase

listaNumerosEntre0e1 = getListNumerosEntre0e1(10,len(clientesPostoA))
tempos2faseA = getTempos2fase(listaNumerosEntre0e1,300,900,1500,1800,0.25,0.6,0.9)

listaNumerosEntre0e1 = getListNumerosEntre0e1(10,len(clientesPostoB))
tempos2faseB = getTempos2fase(listaNumerosEntre0e1,300,600,900,1200,0.25,0.7,0.95)

listaNumerosEntre0e1 = getListNumerosEntre0e1(10,len(clientesPostoC))
tempos2faseC = getTempos2fase(listaNumerosEntre0e1,300,600,900,1200,0.1,0.45,0.9)


#Classe Cliente
class Cliente:
  def __init__(cliente, id, tchegada, tatendimento, tipoassunto, tatend2fase1, tatend2fase2, tatend3fase):
    cliente.id = id
    cliente.tchegada = tchegada
    cliente.tatendimento = tatendimento
    cliente.tipoassunto = tipoassunto
    cliente.tatend2fase1 = tatend2fase1
    cliente.tatend2fase2 = tatend2fase2
    cliente.tatend3fase = tatend3fase

listaUtentes = []
tabelaClientes = []

# Geração dos Clientes do Sistema
for i in range(0,nClientes):
    dados = []
    if i in clientesGerais:
        dados.append("G"+str(i+1))
    else:
        dados.append("P"+str(i+1))
    dados.append(temposChegada[i])
    randomTempoTriagem = random.choice(list(temposTriagem))
    dados.append(randomTempoTriagem)
    temposTriagem.remove(randomTempoTriagem)
    if i in clientes2fase:
        if i in clientesPostoA:
            dados.append("A")
            randomTempo2fase = random.choice(list(tempos2faseA))
            dados.append(randomTempo2fase)
            tempos2faseA.remove(randomTempo2fase)
            if (i in clientesPostoA3FaseRegressam):
                num = random.randrange(60,1800)
                dados.append(num)
            else:
                dados.append(0)
            if (i in clientesPostoA3Fase):
                randomTempo3fase = random.choice(list(tempos3fase))
                dados.append(randomTempo3fase)
                tempos3fase.remove(randomTempo3fase)
            else:
                dados.append(0)
        elif (i in clientesPostoB):
            dados.append("B")
            randomTempo2fase = random.choice(list(tempos2faseB))
            dados.append(randomTempo2fase)
            tempos2faseB.remove(randomTempo2fase)
            if i in clientesPostoB3FaseRegressam:
                num = random.randrange(60,1800)
                dados.append(num)
            else:
                dados.append(0)
            if (i in clientesPostoB3Fase):
                randomTempo3fase = random.choice(list(tempos3fase))
                dados.append(randomTempo3fase)
                tempos3fase.remove(randomTempo3fase)
            else:
                dados.append(0)
        elif (i in clientesPostoC):
            dados.append("C")
            randomTempo2fase = random.choice(list(tempos2faseC))
            dados.append(randomTempo2fase)
            tempos2faseC.remove(randomTempo2fase)
            if i in clientesPostoC3FaseRegressam:
                num = random.randrange(60,1800)
                dados.append(num)
            else:
                dados.append(0)
            if (i in clientesPostoC3Fase):
                randomTempo3fase = random.choice(list(tempos3fase))
                dados.append(randomTempo3fase)
                tempos3fase.remove(randomTempo3fase)
            else:
                dados.append(0)
    else:
        dados.append("-")
        dados.append(0)
        dados.append(0)
        randomTempo3fase = random.choice(list(tempos3fase))
        dados.append(randomTempo3fase)
        tempos3fase.remove(randomTempo3fase)
    tabelaClientes.append(dados)
    

for i in range(0,nClientes):
    listaUtentes.append(Cliente(tabelaClientes[i][0],tabelaClientes[i][1],tabelaClientes[i][2],tabelaClientes[i][3],tabelaClientes[i][4],tabelaClientes[i][5],tabelaClientes[i][6]))


